snippet dispatch_once
static dispatch_once_t onceToken;
dispatch_once(&onceToken, ^{
	$1 
});
endsnippet

snippet interface-declaration
@interface $1:$2

@end
endsnippet

snippet interface-extension
@interface $1()

@end
endsnippet

snippet interface-category
@interface $1($2)

@end
endsnippet

snippet clang-format
// clang-format off
$1
// clang-format on
endsnippet

snippet initview
- (instancetype)initWithFrame:(CGRect)frame{
	if (self = [super initWithFrame:frame]){
		[self makeView];
	}
	return self;
}

- (void)makeView{
	$1
}

#pragma mark - setter
#pragma mark - getter
endsnippet

snippet mas_makeConstraints
[self$1 mas_makeConstraints:^(MASConstraintMaker *make){
	$2
}];
endsnippet

snippet mas_remakeConstraints
[self$1 mas_remakeConstraints:^(MASConstraintMaker *make){
	$2
}];
endsnippet

snippet mas_updateConstraints
[self$1 mas_updateConstraints:^(MASConstraintMaker *make){
	$2
}];
endsnippet

snippet init
if (self = [super init$1]) {
	$2
}
return self;
endsnippet

snippet notnil
if ($1){
}
endsnippet

snippet getter
- ($1)$2{
	if (_$2 == nil) {
		_$2 = [[$3]];
	}
	return _$2;
}
endsnippet

snippet getterlabel
- (UILabel*)$1{
	if (_$1 == nil) {
		_$1 = [[UILabel alloc] init];
		_$1.text = @"";
		_$1.textAlignment = NSTextAlignmentCenter;
		[_$1.font fontWithSize:14];
		[_$1 setBackgroundColor:[UIColor clearColor]];
		[_$1 setTextColor:[UIColor blackColor]];
	}
	return _$1;
}
endsnippet

snippet for++
for (int index = 0; index < $1; index++){
	$2
}
ndsnippet

snippet forin
for ($1 in $2){

}
endsnippet

snippet forenum_dict
[$1 enumerateKeysAndObjectsUsingBlock:^(id	_Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {

}];
endsnippet

snippet forenum_array
[$1 enumerateObjectsUsingBlock:^(ObjectType obj, NSUInteger idx, BOOL *stop) {

}];
endsnippet

snippet forenumReverse
[$1 enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {

}];
endsnippet

snippet edges
make.edges.equalTo(self$1).with.insets(UIEdgeInsetsMake(0,0,0,0));
endsnippet

snippet UICollectionViewDataSource
// 定义展示的Section的个数
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
}

// 定义展示的UICollectionViewCell的个数
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
}

// 每个UICollectionView展示的内容
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
}
endsnippet

snippet UICollectionViewDelegateFlowLayout
// 定义每个UICollectionViewCell的大小
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
}

// 定义每个UICollectionViewCell的margin
- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
}

// UICollectionViewCell最小行间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section
{
}

// UICollectionViewCell最小列间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section
{
}

// 设定页眉的尺寸
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
{
	return CGSizeZero;
}

// 设定页脚的尺寸
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section
{
	return CGSizeZero;
}
endsnippet

snippet UICollectionViewDelegate
// UICollectionView被选中时调用的方法
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
}

// 返回这个UICollectionView是否可以被选择
- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
}
endsnippet

snippet UIScrollViewDelegate
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
// 停止类型1、停止类型2
BOOL scrollToScrollStop = !scrollView.tracking && !scrollView.dragging && !scrollView.decelerating;
	if (scrollToScrollStop) {
		[self scrollViewDidEndScroll];
	}
}

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate {
	if (!decelerate) {
	// 停止类型3
		BOOL dragToDragStop = scrollView.tracking && !scrollView.dragging && !scrollView.decelerating;
		if (dragToDragStop) {
			[self scrollViewDidEndScroll];
		}
	}
}

- (void)scrollViewDidEndScroll {
}
endsnippet

snippet singleton
SingletonMacro($1);
- (void)initData {
}
endsnippet


snippet tableviewdelegate
#pragma mark - UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
	return 0.0;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
	return 0;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
	NSLog(@"%@", indexPath);
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
	return self.headerViewArray[section];
}

#pragma mark - UITableViewDataSource
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
	return self.dateSource.count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
	return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
	PlanTableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:Id_PlanTableViewCell forIndexPath:indexPath];
	return cell;
}
endsnippet

snippet remark
/**
$1
*/
endsnippet

snippet pragmav
#pragma mark - life-cycle
#pragma mark - delegate
#pragma mark - event-response
#pragma mark - setter
#pragma mark - getter
endsnippet

snippet pragmac
#pragma mark - lifecycle
#pragma mark - V·Control
#pragma mark - V·VM·DataScheduling
#pragma mark - V·VM·RAC
#pragma mark - getter
endsnippet

snippet pragmam
#pragma mark - insert
#pragma mark - update
#pragma mark - delete
#pragma mark - search
#pragma mark - getter
endsnippet

snippet pragmamv
#pragma mark - M->V
#pragma mark - V->M
#pragma mark - getter
endsnippet

